<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE xep SYSTEM 'xep.dtd' [
  <!ENTITY % ents SYSTEM 'xep.ent'>
%ents;
  <!ENTITY rgblind "<em>Red/Green-Blindness</em>">
  <!ENTITY bblind "<em>Blue-Blindness</em>">
  <!ENTITY cvd "Color Vision Deficiency">
  <!ENTITY cvds "Color Vision Deficiencies">
]>
<?xml-stylesheet type='text/xsl' href='xep.xsl'?>
<xep>
<header>
  <title>Consistent Color Generation</title>
  <abstract>This specification provides a set of algorithms to consistently generate colors given a string. The string can be a nickname, a JID or any other piece of information. All entities adhering to this specification generate the same color for the same string, which provides a consistent user experience across platforms.</abstract>
  &LEGALNOTICE;
  <number>0392</number>
  <status>Experimental</status>
  <type>Standards Track</type>
  <sig>Standards</sig>
  <approver>Council</approver>
  <dependencies></dependencies>
  <supersedes/>
  <supersededby/>
  <shortname>colors</shortname>
  &jonaswielicki;
  <revision>
    <version>0.4</version>
    <date>2017-11-29</date>
    <initials>jwi</initials>
    <remark>
      <p>Use different formulas for Color Vision Deficiency correction, as suggested by Marcus Waldvogel.</p>
      <p>Update test vectors.</p>
      <p>Clarify generation of the angle.</p>
      <p>Prioritize nicknames over bare JIDs.</p>
      <p>Add rationale for new palette mapping algorithm introduced in 0.3.</p>
    </remark>
  </revision>
  <revision>
    <version>0.3</version>
    <date>2017-11-13</date>
    <initials>jwi</initials>
    <remark><p>
      Fix wording in angle generation section which did still use CRC32.
      Rework palette mapping after with implementation experience.
    </p></remark>
  </revision>
  <revision>
    <version>0.2</version>
    <date>2017-10-04</date>
    <initials>jwi</initials>
    <remark><p>
        Move to SHA-1 as mixing function;
        Properly reference BT.601 and include constants in text;
        Prefer bare JID over roster name when selecting the hash function input;
        Editing.
    </p></remark>
  </revision>
  <revision>
    <version>0.1</version>
    <date>2017-09-27</date>
    <initials>XEP Editor: jwi</initials>
    <remark><p>Accepted as Experimental by Council.</p></remark>
  </revision>
  <revision>
    <version>0.0.1</version>
    <date>2017-09-14</date>
    <initials>jwi</initials>
    <remark><p>First draft.</p></remark>
  </revision>
</header>
<section1 topic='Introduction' anchor='intro'>
  <p>Colors provide a valuable visual cue to recognize shapes. Recognition of colors works much faster than recognition of text. Together with the length and overall shape of a piece of text (such as a nickname),  a color provides a decent amount of entropy to distinguish a reasonable amount of entities, without having to actually read the text.</p>
  <p>Clients have been using randomly or deterministically chosen colors for users in multi-user situations for a long time already. However, since there has been no standard for how this is implemented, the experience differs across platforms. The goal of this XEP is to provide a uniform, platform-independent, stateless and easy-to-implement way to map arbitrary bytestrings to colors, as well as give recommendations how this is applied to color names of participants in conversations, roster entries and other pieces of text.</p>
  <p>To allow cross-client use, it is important that the color scheme can be adapted to different environments. This specification provides means to adapt colors to different background colors as well as &cvds;.</p>
  <p>In no way is the system presented in this specification a replacement for names. It only serves as an additional visual aid.</p>
</section1>
<section1 topic='Requirements' anchor='reqs'>
  <p>The color generation mechanism should provide the following features:</p>
  <ul>
    <li>Consistent generation of color across all platforms depending solely on the identifier used as input for the algorithm.</li>
    <li>The system should be reasonably fast; it must be possible to, for example, apply it to all roster entries even of very large rosters in reasonable amount of time.</li>
    <li>It must be able to provide decent contrast on any background.</li>
    <li>The implementation should be stateless and not be complex.</li>
    <li>A fallback path for users with common types of &cvds; must be provided.</li>
    <li>A fallback path for systems which can only use colors from a restricted palette must be provided.</li>
  </ul>
</section1>
<section1 topic='Use Cases' anchor='usecases'>
  <section2 topic='Generating a color' anchor='usecase-textcolor'>
    <p>To generate a color from a string of text, the follownig algorithms are applied in order:</p>
    <ol>
      <li><link url='#algorithm-angle'>Generate an angle in the CbCr plane from the text</link>.</li>
      <li>If enabled, <link url='#algorithm-cvd'>apply configured corrections for &cvds;</link>.</li>
      <li>If the output device only supports a small palette of colors, <link url='#algorithm-mappalette'>map the angle  to the closest palette color</link>.</li>
      <li>If the output device supports RGB output, <link url='#algorithm-cbcr'>Convert the angle to a CbCr pair</link> and <link url='#algorithm-rgb'>convert the CbCr pair to an RGB triple</link>.</li>
    </ol>
  </section2>
  <section2 topic='Adding colors to participants of a conversation' anchor='usecase-nickcolor'>
    <p>Implementations may colorize the participants of a conversation with an individual color to make them easier to distinguish.</p>
    <p>In such cases, the color SHOULD be generated as described in the <link url='#usecase-textcolor'>Generating a color</link> section. The input used SHOULD be, in descending order of preference, (a) the nickname from the conversation, (b) the bare JID.</p>
  </section2>
  <section2 topic='Auto-Generating Avatars' anchor='usecase-avatar'>
    <p>Implementations may want to show a picture in connection with a contact even if the contact does not have an avatar defined (e.g. via &xep0084;).</p>
    <p>In such cases, auto-generating an avatar SHOULD happen as follows:</p>
    <ol>
      <li>Obtain a name for the contact, in descending order of preference, (a) the nickname from the conversation, (b) the bare JID of the contact (<em>not</em> the bare JID of the conference in case of a &xep0045; room).</li>
      <li>Generate a color as described in the <link url='#usecase-textcolor'>Generating a color</link> section.</li>
      <li>Fill an implementation-defined background shape with that color.</li>
      <li>Render the first character of the name in white or black centered on the shape.</li>
    </ol>
  </section2>
</section1>
<section1 topic='Business Rules' anchor='rules'>
  <ul>
    <li>Implementations SHOULD allow the user to turn off any colorization completely.</li>
    <li>Implementations SHOULD implement the &cvd; profiles and SHOULD allow the user to choose any of these profiles or to disable the correction.</li>
    <li>Implementations MUST NOT share the &cvd; correction settings with other entities.</li>
  </ul>
</section1>
<section1 topic='Algorithms' anchor='algorithm'>
  <section2 topic='Angle generation' anchor='algorithm-angle'>
    <p>Input: An identifier, encoded as octets of UTF-8 (&rfc3269;).</p>
    <p>Output: Angle in the CbCr plane.</p>
    <p>Note: The goal of this algorithm is to convert arbitrary text into a scalar value which can then be used to calculate a color. As it happens, the CbCr plane of the YCbCr space determines the color (while Y merely defines the lightness); thus, an angle in the CbCr plane serves as a good scalar value to select a color.</p>
    <ol>
      <li>Run the input through SHA-1 (&rfc3174;).</li>
      <li>Treat the output as little endian and extract the last-significant 16 bits. (These are the first two bytes of the output, with the second byte being the most significant one.)</li>
      <li>Divide the value by 65536 (use float division) and multiply it by 2&#960; (two Pi).</li>
    </ol>
  </section2>
  <section2 topic='Corrections for &cvds;' anchor='algorithm-cvd'>
    <p>Input: Angle in the CbCr plane.</p>
    <p>Output: Angle in the CbCr plane.</p>
    <p>Note: This algorithm will re-map the angle to map it away from ranges which can not be distinguished by people with the respective &cvds;.</p>
    <section3 topic='Red/Green-blindness' anchor='algorithm-cvd-rg'>
      <p>Take the angle modulo &#960;.</p>
      <p>Note: the same effect can be achieved by forcing the most-significant bit of the angle to zero before converting to a float in <link url="#algorithm-angle">Angle generation</link>. This avoids having to perform a floating-point modulo operation.</p>
    </section3>
    <section3 topic='Blue-blindness' anchor='algorithm-cvd-b'>
      <p>Subtract &#960;/2 from the angle, take the result modulo &#960; and add &#960;/2.</p>
      <p>Note: the same effect can be achieved by setting the most-significant bit of the angle to the inverse of the second-most-significant bit before conversion to floating point in <link url="#algorithm-angle">Angle generation</link>. This avoids having to perform a floating-point modulo operation.</p>
    </section3>
  </section2>
  <section2 topic='CbCr generation' anchor='algorithm-cbcr'>
    <p>Input: Angle in the CbCr plane, from the previous algorithm.</p>
    <p>Output: Values for Cb and Cr in the YCbCr &BT.601; color space in the range from -0.5 to 0.5.</p>
    <p>Form a vector from the angle and project it to edges of a quad in 2D space with edge length 1 around (0, 0). The resulting coordinates are Cb and Cr:</p>
    <code><![CDATA[float cr = sin(angle);
float cb = cos(angle);
float factor;
if (abs(cr) > abs(cb)) {
  factor = 0.5 / abs(cr);
} else {
  factor = 0.5 / abs(cb);
}
cb = cb * factor;
cr = cr * factor;
]]></code>
  </section2>
  <section2 topic='CbCr to RGB' anchor='algorithm-rgb'>
    <p>Input: Values for Cb and Cr in the YCbCr &BT.601; color space in the range from -0.5 to 0.5; Value for Y.</p>
    <p>Output: Values for Red (R), Green (G) and Blue (B) in the RGB color space in the range from 0 to 1.</p>
    <p>Note: The recommended value for Y is 0.732. See <link url='#impl-gamma'>Gamma Correction</link> for a discussion on the choice of Y.</p>
    <ol>
      <li>Calculate r, g and b according to BT.601:<code><![CDATA[float r = 2*(1 - KR)*cr + y;
float b = 2*(1 - KB)*cb + y;
float g = (y - KR*r - KB*b)/KG;
]]></code></li>
      <li>Clip the values of r, g and b to the range from 0 to 1.</li>
    </ol>
    <p>See <link url='#constants-ycbcr'>Constants for YCbCr (BT.601)</link> for the values of KR, KG and KB.</p>
  </section2>
  <section2 topic='Adapting the Color for specific Background Colors' anchor='algorithm-bg'>
    <p>Input: RGB values for the color to adapt (Ri, Gi, Bi) and for the background color to adapt to (Rb, Gb, Bb), in the range from 0 to 1 each.</p>
    <p>Output: Values for Red (Rc), Green (Gc) and Blue (Bc) in the RGB color space in the range from 0 to 1.</p>
    <ol>
      <li>Invert the background color by subtracting the individual channels from 1 each:
        <code><![CDATA[
rb_inv = 1-rb;
gb_inv = 1-gb;
bb_inv = 1-bb;]]></code></li>
      <li>Mix the inverted background with the color to adapt, using a mixing factor of 0.2:
        <code><![CDATA[
rc = 0.2*rb_inv + 0.8*ri;
gc = 0.2*gb_inv + 0.8*gi;
bc = 0.2*bb_inv + 0.8*bi;]]></code></li>
    </ol>
  </section2>
  <section2 topic='RGB to YCbCr' anchor='algorithm-rgb2cbcr'>
    <p>Input: Values for Red (R), Green (G) and Blue (B) in the RGB color space in the range from 0 to 1.</p>
    <p>Output: Values for Cb and Cr in the YCbCr &BT.601; color space in the range from -0.5 to 0.5; Value for Y.</p>
    <p>Calculate Y, Cb and Cr according to BT.601:</p>
    <code><![CDATA[
y = KR*r + (1 - KR - KB)*g + KB*b;
cb = (b - y) / (1 - KB) / 2
cr = (r - y) / (1 - KR) / 2
]]></code>
    <p>See <link url='#constants-ycbcr'>Constants for YCbCr (BT.601)</link> for the values of KR, KG and KB.</p>
  </section2>
  <section2 topic='Conversion of an RGB color palette to a CbCr color palette' anchor='algorithm-genpalette'>
    <p>Input: A set of RGB colors (each component from 0 to 1).</p>
    <p>Output: A mapping from angles (from 0 to 2&#960;) to RGB colors.</p>
    <p>Note: when the algorithm finishes, the mapping maps angles (rounded to two decimal places) to the R, G, B triples which come closest to the desired color and lightness.</p>
    <ol>
      <li>Create an empty mapping M which maps from pairs of CbCr values to quadruples of Y, R, G and B.</li>
      <li>For each color R, G, B from the input palette:
        <ol>
          <li>If the R, G and B values are equal, skip the color and continue with the next.</li>
          <li>Calculate Y, Cb and Cr from R, G, B as described in <link url='#algorithm-rgb2cbcr'>RGB to YCbCr</link>.</li>
          <li><p>Convert Cb and Cr to an angle:</p>
            <code><![CDATA[
magn = sqrt(Cb**2 + Cr**2)
if magn > 0:
    cr /= magn
    cb /= magn
angle = atan2(cr, cb) % (2*pi)
]]></code>
            <p>Here, % is the floating point modulo operator. Since atan2 may return negative values, it is used to put the values into the range from 0 to 2&#960;. ** is the exponentiation operator (cb**2 is thus cb squared).</p>
          </li>
          <li>Round the angle to two digits behind the decimal point.</li>
          <li>If the angle is not in the mapping M yet, or if the Y value of the existing entry is farther away from 0.732 than the new Y value, put the Y, R, G, and B values as value for the angle into the mapping.</li>
        </ol>
      </li>
      <li>Strip the Y values from the values of mapping M.</li>
      <li>Return M as the result of the algorithm.</li>
    </ol>
    <p>Implementations are free to choose a representation for palette colors different from R, G, B triplets. The exact representation does not matter, as long as it can be converted to an angle in the CbCr plane accordingly.</p>
  </section2>
  <section2 topic='Mapping of a CbCr color to closest palette color' anchor='algorithm-mappalette'>
    <p>Input: (a) A mapping which maps angles to R, G, B triplets and (b) a color to map to the closest palette color as angle alpha.</p>
    <p>Output: A palette color as R, G, B triplet.</p>
    <p>Note: See <link url='#algorithm-genpalette'>Conversion of an RGB color palette to a CbCr color palette</link> on how to convert an R, G, B triplet or a CbCr pair to an angle.</p>
    <ol>
      <li>First, check if alpha rounded to two places behind the decimal point has an exact match in the mapping. If so, return that match immediately.</li>
      <li>For each angle beta in the palette, calculate the distance metric: <code>D = min((alpha - beta) % (2*pi), (beta - alpha) % (2*pi))</code>.</li>
      <li>Return the R, G, B triplet associated with the angle with the smallest distance metric D.</li>
    </ol>
    <p>Implementations are free to choose a representation for palette colors different from R, G, B triplets. The exact representation does not matter, as long as it can be converted to an angle in the CbCr plane accordingly.</p>
  </section2>
</section1>
<section1 topic='Implementation Notes' anchor='impl'>
  <section2 topic='Gamma Correction' anchor='impl-gamma'>
    <p>An implementation may choose a different value for Y depending on whether the sink for the R, G and B values expects Gamma Encoded or Gamma Decoded values. The recommended default of 0.732 is 0.5 to the power of 0.45, that is, a Gamma Encoded 0.5.</p>
    <p>Modifications to Y SHOULD NOT be used to correct for bright/dark backgrounds. Implementations SHOULD instead use the algorithm described in <link url='#algorithm-bg'>Adapting the Color for specific Background Colors</link> for that.</p>
  </section2>
  <section2 topic='Background Color Correction' anchor='impl-bgcolor'>
    <p>An implementation which shows the generated colors on a colored background SHOULD apply <link url='#algorithm-bg'>Adapting the Color for specific Background Colors</link>. If the background is not uniformly colored, it is up to the implementation to determine an appropriate surrogate background color to correct against.</p>
    <p>If an implementation shows the generated colors on a grayscale (including white and black) background, it MAY apply the background color correction algorithm. It is RECOMMENDED to always apply the algorithm if the background color is changed dynamically, to avoid discontinuities between grayscale and colored backgrounds.</p>
    <p>Implementations SHOULD use the same background color for all generated colors. If this is not feasible, implementations SHOULD use the same background color for all generated colors within the same GUI control (for example, within a conversation and within the roster).</p>
  </section2>
</section1>
<section1 topic='Accessibility Considerations' anchor='access'>
  <p>As outlined above, implementations SHOULD offer the &rgblind; and &bblind; corrections as defined in the <link url='#algorithm-cvd'>Corrections for &cvds;</link> section. Users SHOULD be allowed to choose between:</p>
  <ul>
    <li>disabling all corrections (skip the Corrections for &cvds; step entirely),</li>
    <li>applying one of the &cvd; correction profiles and</li>
    <li>disabling colorization altogether.</li>
  </ul>
  <p>The last option is useful for users with monochromatic view or who find colors distracting.</p>
  <p>Some sources on the internet indicate that people with &cvds; may profit from having larger areas of color to be able to recognize them. This should be taken into consideration when selecting font weights and line widths for colored parts.</p>
</section1>
<section1 topic='Security Considerations' anchor='security'>
  <p>This specification extracts a bit more information from an entity and shows it alongside the existing information to the user. As the algorithm is likely to produce different colors for look-alikes (see &xep0165; for examples) in JIDs, it may add additional protection against attacks based on those.</p>
  <p>Due to the limited set of distinguishable colors and only extracting 16 bits of the hash function output, possible &cvds; and/or use of palettes, entities MUST NOT rely on colors being unique in any context.</p>
</section1>
<section1 topic='Design Considerations' anchor='design'>
  <p>This section provides an overview of design considerations made while writing this specification. It shows alternatives which have been considered, and eventually rejected.</p>
  <section2 topic='Other variants of the YCbCr color space' anchor='design-other-ycbcr'>
    <p>The other common YCbCr variants, BT.709 and BT.2020, do not achieve a brightness across the color space as uniform as &BT.601; does. Adapting the Y value for uniform luminosity across the range for CbCr would have complicated the algorithm with little or no gain.</p>
  </section2>
  <section2 topic='Hue-Saturation-Value/Lightness color space' anchor='design-hsv'>
    <p>The HSV and HSL color spaces fail to provide uniform luminosity with fixed value/lightness and saturation parameters. Adapting those parameters for uniform luminosity across the hue range would have complicated the algorithm with litte to no gain.</p>
  </section2>
  <section2 topic='Palette-based and context-aware coloring' anchor='design-context'>
    <p>Given a fixed-size and finite palette of colors, it would be possible to ensure that, until the number of entities to color exceeds the number of colors, no color collisions happen.</p>
    <p>There are issues with this approach when the set of entities is dynamic. In such cases, it is possible that an entity changes its associated color (for example by re-joining a colored group chat), which defeats the original purpose.</p>
    <p>In addition, more state needs to be taken into account, increasing the complexity of choosing a color.</p>
  </section2>
  <section2 topic='Choice of mixing function in angle generation' anchor='design-mixing'>
    <p>This specification needs to collapse an arbitrarily long string into just a few bits (the angle in the CbCr plane). To do so, SHA-1 (&rfc3174;) is used.</p>
    <p>CRC32 and Adler32 have been considered as faster alternatives. Downsides of these functions:</p>
    <ul>
      <li>Bad mixing without additional entropy.</li>
      <li>Adler32 is rarely available in standard libraries.</li>
      <li>CRC32 is ambiguous: there are multiple polynomials in widespread use (e.g. the Ethernet and the zlib polynomials). Often it is not clear which polynomial is used by a library.</li>
    </ul>
    <p>SHA-1 is widely available. From a security point of view, the exact choice of hash function does not matter here, since it is truncated to 16 bits. At this length, any cryptographic hash function is weak.</p>
  </section2>
  <section2 topic='Palette-mapping function' anchor='design-palette-mapping'>
    <p>The palette-mapping algorithm operates on angles only and disregards the Y value except if the angles match. This has the downside that the brightness is not equal over the range of the palette mapped colors.</p>
    <p>The alternative would be to require Y to be close to the target Y. This has several issues:</p>
    <ul>
      <li>We cannot know if a palette can satisfy the given Y at all.</li>
      <li>Many colors from e.g. the "Web Safe" palette (used in 256 color terminals and the test vectors) will not satisfy any given Y, reducing the size of the effective palette drastically.</li>
    </ul>
    <p>For the sake of having more colors available, the given algorithm was chosen which prefers many colors with hue conformance over fewer colors with hue and lightness conformance.</p>
  </section2>
</section1>
<section1 topic='IANA Considerations' anchor='iana'>
  <p>This document requires no interaction with &IANA;. </p>
</section1>
<section1 topic='XMPP Registrar Considerations' anchor='registrar'>
  <p>This document requires no interaction with the &REGISTRAR;. </p>
</section1>
<section1 topic='Acknowledgements' anchor='acknowledgements'>
  <p>Thanks to Klaus Herberth, Daniel Gultsch, Georg Lukas, Tobias Markmann, Christian Schudt, and Marcus Waldvogel for their input and feedback on this document.</p>
</section1>
<section1 topic='Test Vectors and Constants' anchor='vectors-and-constants'>
  <section2 topic='Constants for YCbCr (BT.601)' anchor='constants-ycbcr'>
    <p>Throughout the document, the constants KR, KG and KB are used. They are defined in &BT.601; as:</p>
    <code><![CDATA[
KR = 0.299
KG = 0.587
KB = 0.114
]]></code>
  </section2>
  <section2 topic='Test Vectors' anchor='testvectors-fullrange'>
    <p>This section holds test vectors for the different configurations. The test vectors are provided as Comma Separated Values. Strings are enclosed by single quotes (&apos;). The first line contains a header. Each row contains, in that order, the original text, the text encoded as UTF-8 as hexadecimal octets, the angle in radians, and the Cb, Cr, Red, Green, and Blue values.</p>
    <section3 topic='No &cvd; correction' anchor='testvectors-fullrange-no-cvd'>
      <code><![CDATA[text,hextext,angle,cb,cr,r,g,b
'Romeo','526f6d656f',5.711682,0.500000,-0.321546,0.281,0.790,1.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',3.654901,-0.500000,-0.281855,0.337,1.000,0.000
'😺','f09f98ba',5.780519,0.500000,-0.274885,0.347,0.756,1.000
'council','636f756e63696c',6.283089,0.500000,-0.000048,0.732,0.560,1.000]]></code>
    </section3>
    <section3 topic='With Red/Green-blindness correction' anchor='testvectors-fullrange-cvd-redgreen'>
      <code><![CDATA[text,hextext,angle,cb,cr,r,g,b
'Romeo','526f6d656f',2.570089,-0.500000,0.321546,1.000,0.674,0.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',0.513308,0.500000,0.281855,1.000,0.359,1.000
'😺','f09f98ba',2.638926,-0.500000,0.274885,1.000,0.708,0.000
'council','636f756e63696c',3.141497,-0.500000,0.000048,0.732,0.904,0.000]]></code>
    </section3>
    <section3 topic='With Blue-blindness correction' anchor='testvectors-fullrange-cvd-blue'>
      <code><![CDATA[text,hextext,angle,cb,cr,r,g,b
'Romeo','526f6d656f',2.570089,-0.500000,0.321546,1.000,0.674,0.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',3.654901,-0.500000,-0.281855,0.337,1.000,0.000
'😺','f09f98ba',2.638926,-0.500000,0.274885,1.000,0.708,0.000
'council','636f756e63696c',3.141497,-0.500000,0.000048,0.732,0.904,0.000]]></code>
    </section3>
  </section2>
  <section2 topic='Test Vectors for mapping to 216 color palette' anchor='testvectors-palette'>
    <p>The used palette can be generated by sampling the RGB cube evenly with six samples on each axis (resulting in 210 colors (grayscales are excluded)). The resulting palette is commonly known as the palette of so-called "Web Safe" colors.</p>
    <p>Instead of the cb and cr values, the test vectors contain the best_angle as found in the palette.</p>
    <section3 topic='No &cvd; correction' anchor='testvectors-palette-no-cvd'>
      <code><![CDATA[text,hextext,angle,best_angle,cb,cr,r,g,b
'Romeo','526f6d656f',5.711682,5.690000,0.000,0.400,1.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',3.654901,3.640000,0.400,1.000,0.000
'😺','f09f98ba',5.780519,5.770000,0.400,0.600,1.000
'council','636f756e63696c',6.283089,0.040000,0.200,0.000,1.000]]></code>
    </section3>
    <section3 topic='With Red/Green-blindness correction' anchor='testvectors-palette-cvd-redgreen'>
      <code><![CDATA[text,hextext,angle,best_angle,cb,cr,r,g,b
'Romeo','526f6d656f',2.570089,2.550000,1.000,0.600,0.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',0.513308,0.500000,0.600,0.000,1.000
'😺','f09f98ba',2.638926,2.630000,1.000,0.800,0.400
'council','636f756e63696c',3.141497,3.180000,0.800,1.000,0.000]]></code>
    </section3>
    <section3 topic='With Blue-blindness correction' anchor='testvectors-palette-cvd-blue'>
      <code><![CDATA[text,hextext,angle,best_angle,cb,cr,r,g,b
'Romeo','526f6d656f',2.570089,2.550000,1.000,0.600,0.000
'juliet@capulet.lit','6a756c69657440636170756c65742e6c6974',3.654901,3.640000,0.400,1.000,0.000
'😺','f09f98ba',2.638926,2.630000,1.000,0.800,0.400
'council','636f756e63696c',3.141497,3.180000,0.800,1.000,0.000]]></code>
    </section3>
  </section2>
</section1>
</xep>
